#!/usr/bin/env python3

# Adapted from https://github.com/opsani/servo-statestore/blob/master/adjust

import os
import sys

from adjust import Adjust, AdjustError
import common
import state_store

DRIVER_NAME = "batch"
DRIVER_VERSION = "0.1"
DRIVER_DESC = "An Optune adjust driver that stores settings/parameters used in conjunction with the batch measure driver"
HAS_CANCEL=False

config_path = os.environ.get('OPTUNE_CONFIG', './config.yaml')

REQUIRED_SETTINGS_FIELDS = [ "default", "type" ]

class BatchAdjustDriver(Adjust):
    def query(self):
        return common.query_state(DRIVER_NAME, config_path)

    def adjust(self, data):
        assert ("application" in data), \
            "Invalid input: missing application key"

        config=common.parse_config(DRIVER_NAME, config_path)

        for comp_name, comp_data in config['application']['components'].items():
            # Derive inst_disk, share of aggregate disk per instance
            replicas = data['application']['components'][comp_name]['settings'].get('replicas', {}).get('value')
            if replicas is None:
                replicas = config['application']['components'][comp_name]['settings'].get('replicas', {}).get('default')
            minimum_required_aggregate_disk = data['application']['components'][comp_name]['settings'].get('aggregate_disk', {}).get('min')
            if minimum_required_aggregate_disk is None:
                minimum_required_aggregate_disk = comp_data['settings'].get('aggregate_disk', {}).get('default')

            if minimum_required_aggregate_disk is not None and replicas is not None:
                data['application']['components'][comp_name]['settings']['instance_disk'] = {'value': int(minimum_required_aggregate_disk/replicas)}

            # Validate product of replicas and memory per instance is greater than the required aggregate
            minimum_required_aggregate_memory = data['application']['components'][comp_name]['settings'].get('aggregate_memory', {}).get('min')
            if minimum_required_aggregate_memory is None:
                minimum_required_aggregate_memory = comp_data['settings'].get('aggregate_memory', {}).get('default')
            inst_type = data['application']['components'][comp_name]['settings'].get('inst_type', {}).get('value')
            if inst_type is None:
                inst_type = comp_data['settings'].get('inst_type', {}).get('default')

            if minimum_required_aggregate_memory is not None and inst_type is not None:
                inst_mem = config['application']['annotations'][inst_type]['mem']
                if int(inst_mem*replicas) <= minimum_required_aggregate_memory:
                    raise AdjustError(f"component {comp_name}: {replicas} {inst_type} instances only have {inst_mem*replicas} GB of memory which is less than {minimum_required_aggregate_memory} GB required", 
                        status = "rejected", reason = "scheduling-failed")

        # Store application key in state
        # This may raise an exception
        state_store.set_state(data)


# initialize and run
if __name__ == "__main__":
    driver = BatchAdjustDriver(
        version = DRIVER_VERSION,
        cli_desc = DRIVER_DESC,
        supports_cancel = HAS_CANCEL,
        progress_interval = None)

    driver.run()