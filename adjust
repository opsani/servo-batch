#!/usr/bin/env python3

# Adapted from https://github.com/opsani/servo-statestore/blob/master/adjust

import os
import sys

from adjust import Adjust, AdjustError
import common
import state_store

DRIVER_NAME = "batch"
DRIVER_VERSION = "0.1"
DRIVER_DESC = "An Optune adjust driver that stores settings/parameters used in conjunction with the batch measure driver"
HAS_CANCEL=False

config_path = os.environ.get('OPTUNE_CONFIG', './config.yaml')

REQUIRED_SETTINGS_FIELDS = [ "default", "type" ]

class BatchAdjustDriver(Adjust):
    def query(self):
        return common.query_state(DRIVER_NAME, config_path)

    def adjust(self, data):

        config=common.parse_config(DRIVER_NAME, config_path)

        disk_size = config['application']['components']['worker']['settings']['aggregate_disk']['default']
        agg_mem = config['application']['components']['worker']['settings']['aggregate_memory']['default']
        inst_type = data['application']['components']['worker']['settings']['inst_type']['value']

        if 'replicas' in data['application']['components']['worker']['settings']:
            replicas = data['application']['components']['worker']['settings']['replicas']['value']
        else:
            replicas = config['application']['components']['worker']['settings']['replicas']['default']
        data['application']['components']['worker']['settings'].update({'instance_disk':{'value': int(disk_size/replicas)}})

        inst_mem = config['application']['annotations'][inst_type]['mem']
        if int(inst_mem*replicas) < agg_mem:
            raise AdjustError(f"{replicas} of {inst_type} only have {inst_mem*replicas} GB of memory which is less than {agg_mem} GB required", 
                status = "rejected", reason = "rejected")
        assert ("application" in data), \
            "Invalid input: missing application key"

        # Store application key in state
        # This may raise an exception
        state_store.set_state(data)


# initialize and run
if __name__ == "__main__":
    driver = BatchAdjustDriver(
        version = DRIVER_VERSION,
        cli_desc = DRIVER_DESC,
        supports_cancel = HAS_CANCEL,
        progress_interval = None)

    driver.run()